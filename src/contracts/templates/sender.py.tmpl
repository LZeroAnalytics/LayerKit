from web3 import Web3

# Set the necessary variables
private_key = "{{ .PrivateKey }}"
l1_rpc_url = "{{ .RPCURL }}"
bridge_address = "{{ .BridgeAddress }}"

# Web3 connection to the L1 network
w3 = Web3(Web3.HTTPProvider(l1_rpc_url))

bridge_address = w3.to_checksum_address(bridge_address)

# Get the sender account from the private key (only needed to get the address)
account_address = w3.eth.account.from_key(private_key).address
account_address = w3.to_checksum_address(account_address)

# Transaction parameters (without gas for now, will estimate it)
tx = {
    'nonce': w3.eth.get_transaction_count(account_address),
    'from': account_address,  # Sender address
    'to': bridge_address,  # The bridge contract address
    'value': w3.to_wei(100, 'ether'),  # Value in wei (100 ETH in this case)
    'gasPrice': w3.eth.gas_price,
    'chainId': {{ .ChainId }}
}

# Estimate gas for the transaction
estimated_gas = w3.eth.estimate_gas(tx)
tx['gas'] = estimated_gas  # Set the estimated gas

# Sign the transaction with the private key
signed_tx = w3.eth.account.sign_transaction(tx, private_key)

# Send the signed transaction via RPC
tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)

# Print the transaction hash
print("Transaction hash:", tx_hash.hex())