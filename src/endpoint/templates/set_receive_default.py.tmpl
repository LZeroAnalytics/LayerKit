import json
from web3 import Web3

# Load the ABI from the file
with open("{{ .abi_file_path }}", "r") as file:
    abi = json.load(file)

# Create Web3 instance and connect to the blockchain using the provided RPC URL
w3 = Web3(Web3.HTTPProvider("{{ .rpc_url }}"))

# Load the contract with the address and ABI
contract_address = Web3.to_checksum_address("{{ .contract_address }}")
contract = w3.eth.contract(address=contract_address, abi=abi)

# Build the transaction to call setDefaultReceiveLibrary
tx = contract.functions.setDefaultReceiveLibrary({{ .destination_eid }}, Web3.to_checksum_address("{{ .library_address }}"), 0).buildTransaction({
    'from': Web3.to_checksum_address("{{ .owner_address }}"),
    'nonce': w3.eth.getTransactionCount(Web3.to_checksum_address("{{ .owner_address }}")),
    'gasPrice': w3.eth.gas_price,
})

# Estimate gas
estimated_gas = w3.eth.estimateGas(tx)
tx["gas"] = estimated_gas

# Sign the transaction with the private key
signed_tx = w3.eth.account.signTransaction(tx, private_key="{{ .owner_private_key }}")

# Send the transaction
tx_hash = w3.eth.sendRawTransaction(signed_tx.rawTransaction)

# Wait for transaction receipt
tx_receipt = w3.eth.waitForTransactionReceipt(tx_hash)

# Output the transaction hash and status
print(f"Transaction successful with hash: {tx_hash.hex()}")

# Check if the transaction was successful
if tx_receipt.status == 1:
    print("setDefaultReceiveLibrary call was successful")
else:
    print("setDefaultReceiveLibrary call failed")
